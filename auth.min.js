"use strict";function Auth(serverPath=null,dbPath=null){let request=(method,credentials)=>new Promise((resolve,reject)=>{fetch(serverPath,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({path:"/",method:method,data:credentials})}).then(response=>{response.json().then(result=>response.status>399?reject(result):resolve(result))})}),db=null,stateHandler=null,authToken=null,user=null;dbPath&&"function"==typeof Starbase&&(db=Starbase().Channels(Starbase().Database(dbPath)));let stateChange=async token=>{if(token||(token=null),authToken=token,db){await db.path("/auth/token").put({token:authToken})}authToken&&authToken.user?(user=authToken.user,auth.user=user):(user=null,auth.user=user),stateHandler&&"function"==typeof stateHandler&&stateHandler(authToken)},auth={user:null};return auth.getToken=(()=>(async()=>new Promise(async(resolve,reject)=>{if(!authToken&&db){let storedToken=await db.path("/auth/token").get().then(result=>result.data).catch(err=>null);storedToken&&storedToken.token&&(authToken=storedToken.token,stateChange(authToken))}return authToken?authToken.accessExpires<Date.now()?authToken.refreshExpires>Date.now()?void request("refreshToken",authToken).then(result=>(stateChange(result),resolve(result.accessToken))).catch(err=>(stateChange(null),reject(err))):(stateChange(null),reject({code:400,message:"Invalid or expired token."})):resolve(authToken.accessToken):reject({code:400,message:"Invalid or expired token."})}))()),auth.onStateChange=(cb=>{stateHandler=cb}),auth.createUser=((username,password)=>new Promise((resolve,reject)=>{request("createUser",{username:username,password:password}).then(resolve).catch(reject)})),auth.deleteUser=((username,password)=>new Promise((resolve,reject)=>{request("deleteUser",{username:username,password:password}).then(resolve).catch(reject)})),auth.changePassword=((username,password,newPassword)=>new Promise((resolve,reject)=>{request("changePassword",{username:username,password:password,newPassword:newPassword}).then(resolve).catch(reject)})),auth.signIn=((username,password)=>new Promise((resolve,reject)=>{request("signIn",{username:username,password:password}).then(token=>{stateChange(token),resolve(token)}).catch(err=>{reject(err)})})),auth.signOut=(()=>new Promise((resolve,reject)=>{stateChange(null),resolve({message:"Signed out."})})),db&&auth.getToken().catch(err=>{}),auth}